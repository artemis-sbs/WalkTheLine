#
# Scripts can import other MAST files 
# and the can import Python files as well
#
# This python files adds a simple function 
# for displaying messages
import mission_helper_functions.py
#
#
#------------------------------------------------------------------------------------------------------------
# main area
# add values here
#------------------------------------------------------------------------------------------------------------
# main area
# add values here

localTickCounter = -1
emptySpaceCounter = 0

shared next_pos = Vec3(0,0,0)
shared phoenix_id = None
shared num_stations_spawned = 0
# face of admiral
shared admiral_face =  "ter #964b00 8 1;ter #968b00 3 0;ter #968b00 4 0;ter #968b00 5 2;ter #fff 3 5;ter #964b00 8 4;"

#
#
# This is the map for the mission
#
@map/WalkTheLine "Walk The Line"
" A line of bases along the border are under assault.  Protect each station before rushing to the next, in a brave holding action that can have only one final result...
metadata: ```
Properties:
  Main:
    Player Ships: 'gui_int_slider("$text:int;low: 1.0;high:8.0;", var= "PLAYER_COUNT")'
    Difficulty: 'gui_int_slider("$text:int;low: 1.0;high:11.0;", var= "DIFFICULTY")'
  Map:
    Terrain: 'gui_drop_down("$text: {TERRAIN_SELECT};list: none, few, some, lots, max",var="TERRAIN_SELECT")'
    Lethal Terrain: 'gui_drop_down("$text: {LETHAL_SELECT};list: none, few, some, lots, max", var="LETHAL_SELECT")'
    Friendly Ships: 'gui_drop_down("$text: {FRIENDLY_SELECT};list: none, few, some, lots, max", var="FRIENDLY_SELECT")'
    Monsters: 'gui_drop_down("$text: {MONSTER_SELECT};list: none, few, some, lots, max", var="MONSTER_SELECT")'
    Upgrades: 'gui_drop_down("$text: {UPGRADE_SELECT};list: none, few, some, lots, max", var= "UPGRADE_SELECT")'
    Time Limit: 'gui_input("desc: Minutes;", var="GAME_TIME_LIMIT")'
```

# create new station and enemies function----------------------------------------------------------------------------------------------------
    task_schedule(create_new_station)

# player ship ----------------------------------------------------------------------------------------------------
    await task_schedule(spawn_players)
# Setup docking
    await task_schedule(docking_standard_player_station)
# 
# Run a task to check if all players are dead----------------------------------------------------------------------------------------------------
    task_schedule(check_players)
    ->END
        

#
# This code is called when something is destroyed
# Specifically it watches for stations
#
//damage/destroy if has_role(to_object(DESTROYED_ID),"station")
# Any station destroyed ends the game
#--- game_lost ---
    station_name = DESTROYED.name

    my_players = to_object_list(role("__player__") & role("tsn"))
    if len(my_players) > 0:
        textLine = f"{my_players[0].name}, "
    else:
        textLine = f"All TSN ships, "

    textLine = f"{textLine} - {station_name} has been destroyed!  Your mission has come to a glorious conclusion.  You fought for the safety of {num_stations_spawned} stations!  You will be remembered."
    send_general_message("Admiral Harkin", textLine, admiral_face, 0)

#delay a bit
    await delay_sim(10)

# do the end screen
    START_TEXT = f"{station_name} was destroyed. You saved {num_stations_spawned-1} stations at DIFFICULTY {DIFFICULTY}."
    GAME_STARTED = False
    GAME_ENDED = True

    sbs.play_music_file(0,"music/default/failure")
    signal_emit("show_game_results", None)
    ->END




#
# This is a task that watches for players
# when all players are gone, the game ends
#
======= check_players ======= 
#
# Get a list of player, i.e. things with the role __player__
#
    my_players = to_object_list(role("__player__") & role("tsn"))
# if there are no more, game ends
    if len(my_players) <= 0:
        textLine = f"All TSN ships have been destroyed!  Your mission has come to a glorious conclusion.  You fought for the safety of {num_stations_spawned} stations!  You will be remembered."
        send_general_message("Admiral Harkin", textLine, admiral_face, 0)
#delay a bit
        await delay_sim(10)

# do the end screen
        START_TEXT = f"All TSN ships destroyed. You saved {num_stations_spawned-1} stations at DIFFICULTY {DIFFICULTY}."
        GAME_STARTED = False
        GAME_ENDED = True

        sbs.play_music_file(0,"music/default/failure")
        signal_emit("show_game_results", None)
        ->END
# If there are still player ships, keep the task running
# after waiting three seconds
    await delay_sim(seconds=3)
    jump check_players
    #------------------------------------------------------------------------------------------------------------

#
# This create a new station and enemies
#
======= create_new_station ======= 

#checking for enemies alive
    raider_id_list = role("raider")
    emptySpaceCounter += 1
    if len(raider_id_list) > 0:
        emptySpaceCounter = 0

    # create a new base every 10 ticks, or less if enemies are all gone
    localTickCounter += 1
    tickmode = localTickCounter%10
    if emptySpaceCounter > 2:
        tickmode = 0

    # skip creation of new level
    jump end_of_create if 0 != tickmode
    
    terrain_value = terrain_to_value(TERRAIN_SELECT)
    lethal_value =  terrain_to_value(LETHAL_SELECT)
    friendly_value = terrain_to_value(FRIENDLY_SELECT)
    monster_value = terrain_to_value(MONSTER_SELECT)
    upgrade_value = terrain_to_value(UPGRADE_SELECT)

    upgrade_value = 0
    num_upgrade = 0
    if upgrade_value==1:
        num_upgrade = random.randint(1,3)

    if upgrade_value==2:
        num_upgrade = random.randint(3,5)

    if upgrade_value==3:
        num_upgrade = random.randint(5,10)

    if upgrade_value==4:
        num_upgrade = random.randint(10,15)

    if seed_value != 0:
        random.seed(seed_value)
        print(f"Seed Value: {seed_value}")
    else:
        seed_value = random.randint(1,99999)
        random.seed(seed_value)
        print(f"Random Seed Value: {seed_value}")


    #make name
    nName = f"Border Outpost {num_stations_spawned+1}"

    # randomly move next_pos
    angle = random.uniform(0,1) * math.pi/5
    nx = math.sin(angle) * -50000
    nz = math.cos(angle) * 50000
    next_pos.x = next_pos.x + nx
    next_pos.z = next_pos.z + nz

    # next starbase, please ----------------------------------------------------------------------------------------------------
    station_object = npc_spawn(next_pos.x, next_pos.y, next_pos.z, nName, "tsn, station", "starbase_civil", "behav_station")
    phoenix_id = to_id(station_object)
    station_face = random_terran(civilian=False)
    set_face(phoenix_id, station_face) # station face

    # Setup docking and friendly eyes (has_science_scan is for gamemaster, admiral etc.)
    for player_id in any_role("__player__,has_science_scan"):
        player = to_object(player_id)
        continue if player is None
        if has_role(player_id, "__player__"):
            docking_set_docking_logic(player_id, phoenix_id, docking_dock_with_friendly_station)
        link(player_id, "extra_scan_source", phoenix_id)


    num_stations_spawned += 1

# create asteroids  ----------------------------------------------------------------------------------------------------
    cluster_spawn_points = scatter_box(60,  next_pos.x, next_pos.y, next_pos.z, 10000,0,10000, True)
    terrain_spawn_asteroid_scatter(cluster_spawn_points, height=500)

# create nebs  ----------------------------------------------------------------------------------------------------
    cluster_spawn_points = scatter_box(60,  next_pos.x, next_pos.y, next_pos.z, 20000,0,20000, True)
    terrain_spawn_nebula_scatter(cluster_spawn_points,500)

    # create candy  ----------------------------------------------------------------------------------------------------
    num_upgrade = 5
    spawn_points = scatter.box(num_upgrade,  next_pos.x, next_pos.y, next_pos.z, 10000,1000,10000, centered=True)
    upgrade_list = ["carapaction_coil", "infusion_pcoils", "tauron_focuser", "secret_codecase", "hidens_powercell", "vigoranium_nodule", "cetrocite_crystal", "lateral_array", "haplix_overcharger"]

    for v in spawn_points:
        upg = random.randint(  0,   len(upgrade_list)-1  )
        pickup_spawn(v.x, v.y, v.z, upgrade_list[upg])


    # create mines ----------------------------------------------------------------------------------------------------
    #wrap a minefield around the station
    if lethal_value > 0:
        startAngle = random.randrange(0,359)
        angle = random.randrange(90,170)
        endAngle = startAngle + angle

        depth = 1#random.randrange(2,3)
    #        width = random.randrange(int(angle/6), int(angle/3))
        width = int(5 * lethal_value)
        widthArray = [int(angle / 5.0)]
        inner = random.randrange(1200,1500)
        cluster_spawn_points = scatter_ring(width, depth, next_pos.x,next_pos.y,next_pos.z, inner, inner, startAngle, endAngle)
        # Random type, but same for cluster
        for v2 in cluster_spawn_points:
            #keep value between -500 and 500??
    #                v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
            mine_obj = terrain_spawn( v2.x, v2.y + random.randrange(-300,300), v2.z,None, None, "danger_1a", "behav_mine")
            mine_obj.blob.set("damage_done", 5)
            mine_obj.blob.set("blast_radius", 1000)
            mine_obj.engine_object.blink_state = -5



# create black holes
    if random.randrange(0,100) > 66:
        bhPos = next_pos.rand_offset(2000,3000, ring=True)
        terrain_spawn_black_hole(*bhPos.xyz, gravity_radius= 1500, gravity_strength=1.0, turbulence_strength= 1.0, collision_damage=200)


# create friendlies
    num_friends = friendly_value
    for g in range(num_friends):
        spawn_pos = next_pos.rand_offset(2000,3000, ring=True)
        data = {"START_X": spawn_pos.x, "START_Y": spawn_pos.y, "START_Z": spawn_pos.z}
        prefab_spawn(prefab_npc_defender, data)

# create invaders
    enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]
    
    fleet_count = num_stations_spawned * 2      # 1 + int(DIFFICULTY/2)
    fleet_index = int(DIFFICULTY - 1)
    fleet_index = min(fleet_index + fleet_count//4,10)

    for a in range(fleet_count):
        enemy_temp = random.choices(enemyTypeNameList, weights=(100-6*DIFFICULTY, DIFFICULTY*2, DIFFICULTY*2, DIFFICULTY*2))
        enemy = enemy_temp[0]
        fleet_pos = Vec3.rand_in_sphere(10000, 30000, False, True)
        fleet_pos = fleet_pos + next_pos
        prefab_spawn(prefab_fleet_raider, {"race": enemy, "fleet_difficulty": DIFFICULTY, "START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})

    if 0 == num_stations_spawned%3 and DIFFICULTY > 3:
        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
        prefab_spawn(prefab_fleet_raider, {"race": "skaraan", "fleet_difficulty": DIFFICULTY, "START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})

    await delay_sim(seconds=5)  # to make sure the player exists


# announcement from new station
    wordListA = ["suspicious", "dubious", "questionable", "unusual", "debatable", "equivocal", "suspect"]
    wordListB = ["apprehensive","cautious","wary","uncertain","worried","anxious"]
    wordListC = ["we have cookies!","we need your help.","we could use your support.","drinks are on me!","our entertainment suites are the best in the sector!","I have a bad feeling about this..."]
    
    my_players = to_object_list(role("__player__") & role("tsn"))
    if len(my_players) > 0:
        textLine = f"{my_players[0].name}, "
    else:
        textLine = f"To any TSN ship nearby, "
    textLine += f"we're getting {random.choice(wordListA)} readings from our sensors.  It could be nothing, but we are understandably {random.choice(wordListB)}.  Please assist and protect us; {random.choice(wordListC)}"

    await delay_sim(seconds=5)
    send_general_message(nName, textLine, station_face, phoenix_id)


--- end_of_create ---

    await delay_sim(minutes=1)
    jump create_new_station
    #------------------------------------------------------------------------------------------------------------

