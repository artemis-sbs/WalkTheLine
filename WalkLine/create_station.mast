#------------------------------------------------------------------------------------------------------------
# main area
# add values here
shared next_pos = Vec3(0,0,0)
localTickCounter = -1
emptySpaceCounter = 0



#------------------------------------------------------------------------------------------------------------

======= create_new_station ======= 

    #checking for enemies alive
    raider_id_list = role("raider")
    emptySpaceCounter += 1
    if len(raider_id_list) > 0:
        emptySpaceCounter = 0

    # create a new base every 10 ticks, or less if enemies are all gone
    localTickCounter += 1
    tickmode = localTickCounter%10
    if emptySpaceCounter > 2:
        tickmode = 0

    # skip creation of new level
    jump end_of_create if 0 != tickmode



    
    terrain_value = terrain_to_value(TERRAIN_SELECT)
    lethal_value =  terrain_to_value(LETHAL_SELECT)
    friendly_value = terrain_to_value(FRIENDLY_SELECT)
    monster_value = terrain_to_value(MONSTER_SELECT)
    upgrade_value = terrain_to_value(UPGRADE_SELECT)

    upgrade_value = 0
    num_upgrade = 0
    if upgrade_value==1:
        num_upgrade = random.randint(1,3)

        if upgrade_value==2:
        num_upgrade = random.randint(3,5)

    if upgrade_value==2:
        num_upgrade = random.randint(5,10)

    if upgrade_value==4:
        num_upgrade = random.randint(10,15)

    if seed_value != 0:
        random.seed(seed_value)
        print(f"Seed Value: {seed_value}")
    else:
        seed_value = random.randint(1,99999)
        random.seed(seed_value)
        print(f"Random Seed Value: {seed_value}")


    #make name
    nName = f"Border Outpost {num_stations_spawned+1}"

    # randomly move next_pos
    angle = random.uniform(0,1) * math.pi/5
    nx = math.sin(angle) * -50000
    nz = math.cos(angle) * 50000
    next_pos.x = next_pos.x + nx
    next_pos.z = next_pos.z + nz

    # next starbase, please ----------------------------------------------------------------------------------------------------
    station_object = npc_spawn(next_pos.x, next_pos.y, next_pos.z, nName, "tsn, station", "starbase_civil", "behav_station")
    phoenix_id = to_id(station_object)
    station_face = random_terran(civilian=False)
    set_face(phoenix_id, station_face) # station face

    num_stations_spawned += 1

    # create asteroids  ----------------------------------------------------------------------------------------------------
    asteroid_types = ship_data_plain_asteroid_keys()

    cluster_spawn_points = scatter_box(60,  next_pos.x, next_pos.y, next_pos.z, 10000,1000,10000, True)

    for v2 in cluster_spawn_points:
        a_type = random.choice(asteroid_types)

        asteroid = terrain_spawn(v2.x, v2.y, v2.z,None, "#,asteroid", a_type, "behav_asteroid")
        asteroid.engine_object.steer_yaw = random.uniform(0.0001, 0.003)
        asteroid.engine_object.steer_pitch = -random.uniform(0.0001, 0.003)
        asteroid.engine_object.steer_roll = random.uniform(0.0001, 0.003)

        sx = random.uniform(1.0,2.0) + 3
        sy = sx
        sz = sx
        sm = max(sx, sy)
        sm = max(sm, sz)

        asteroid.blob.set("local_scale_x_coeff", sx)
        asteroid.blob.set("local_scale_y_coeff", sy)
        asteroid.blob.set("local_scale_z_coeff", sz)
    #   asteroid.blob.set("exclusionradius", er * 2)
        asteroid.engine_object.exclusion_radius = asteroid.engine_object.exclusion_radius * 1.0 * sm

    # create nebs  ----------------------------------------------------------------------------------------------------

    cluster_spawn_points = scatter_box(60,  next_pos.x, next_pos.y, next_pos.z, 20000,1000,20000, True)

    for v2 in cluster_spawn_points:
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#,nebula", "nebula", "behav_nebula")

    # create candy  ----------------------------------------------------------------------------------------------------
    num_upgrade = 5
    spawn_points = scatter.box(num_upgrade,  next_pos.x, next_pos.y, next_pos.z, 10000,1000,10000, centered=True)
    upgrade_list = ["carapaction_coil", "infusion_pcoils", "tauron_focuser", "secret_codecase", "hidens_powercell", "vigoranium_nodule", "cetrocite_crystal", "lateral_array", "haplix_overcharger"]

    for v in spawn_points:
        upg = random.randint(  0,   len(upgrade_list)-1  )
        pickup_spawn(v.x, v.y, v.z, upgrade_list[upg])
        log(f"{upgrade_list[upg]} spawned {v.x},{v.y},{v.z}", "upgrades")

    # create mines ----------------------------------------------------------------------------------------------------
    #wrap a minefield around the station
    if lethal_value > 0:
        startAngle = random.randrange(0,359)
        angle = random.randrange(90,170)
        endAngle = startAngle + angle

        depth = 1#random.randrange(2,3)
    #        width = random.randrange(int(angle/6), int(angle/3))
        width = int(5 * lethal_value)
        widthArray = [int(angle / 5.0)]
        inner = random.randrange(1200,1500)
        cluster_spawn_points = scatter_ring(width, depth, next_pos.x,next_pos.y,next_pos.z, inner, inner, startAngle, endAngle)
        # Random type, but same for cluster
        # a_type = f"danger_{1}{ship_data'a'}"
        for v2 in cluster_spawn_points:
            #keep value between -500 and 500??
    #                v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
            mine_obj = terrain_spawn( v2.x, v2.y + random.randrange(-300,300), v2.z,None, None, "danger_1a", "behav_mine")
            mine_obj.blob.set("damage_done", 5)
            mine_obj.blob.set("blast_radius", 1000)
            mine_obj.engine_object.blink_state = -5

    #num += 1

    # create black holes
    if random.randrange(0,100) > 66:
        bhPos = next_pos.rand_offset(2000,3000, ring=True)
        terrain_spawn_black_hole(*bhPos.xyz, gravity_radius= 1500, gravity_strength=1.0, turbulence_strength= 1.0, collision_damage=200)

    # create monsters

    # create friendlies
    tsn_ship_data = ship_data_filter_ship_data_by_side(None, "TSN", "defender", ret_key_only=False)
    num_friends = random.randrange(0,3)
    for g in range(num_friends):
        bhPos = next_pos.rand_offset(2000,3000, ring=True)
        ship = random.choice(tsn_ship_data)
        name_val = random.randrange(0,999)
        friend = to_id(npc_spawn(*bhPos.xyz, f"tsn {str(name_val).zfill(3)}", "tsn, friendly", ship["key"], "behav_npcship"))

    # create invaders

    enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]
    
    fleet_count = num_stations_spawned * 2      # 1 + int(DIFFICULTY/2)
    fleet_index = int(DIFFICULTY - 1)
    fleet_index = min(fleet_index + fleet_count//4,10)

    for a in range(fleet_count):
        enemy_temp = random.choices(enemyTypeNameList, weights=(100-6*DIFFICULTY, DIFFICULTY*2, DIFFICULTY*2, DIFFICULTY*2))
        enemy = enemy_temp[0]
        fleet_pos = Vec3.rand_in_sphere(10000, 30000, False, True)
        fleet_pos = fleet_pos + next_pos
        prefab_spawn(prefab_fleet_raider, {"race": enemy, "fleet_difficulty": DIFFICULTY, "START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})

    if 0 == num_stations_spawned%3 and DIFFICULTY > 3:
        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
        prefab_spawn(prefab_fleet_raider, {"race": "skaraan", "fleet_difficulty": DIFFICULTY, "START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})

    await delay_sim(seconds=5)  # to make sure the player exists

    # # make sure friend eyes are updated ---------------------------
    #my_players = to_object_list(role("__player__") & role("tsn"))
    # for player in my_players:

    #     blob = to_blob(player)
    #     num_ids = blob.get("num_extra_scan_sources",0)

    #     for friend in any_role("friendly, station"):
    #         blob.set("extra_scan_source", friend, num_ids)
    #         num_ids += 1
    #         follow_route_select_science(player, friend)

    #     blob.set("num_extra_scan_sources",num_ids,0)


    # announcement from new station
    wordListA = ["suspicious", "dubious", "questionable", "unusual", "debatable", "equivocal", "suspect"]
    wordListB = ["apprehensive","cautious","wary","uncertain","worried","anxious"]
    wordListC = ["we have cookies!","we need your help.","we could use your support.","drinks are on me!","our entertainment suites are the best in the sector!","I have a bad feeling about this..."]
    
    my_players = to_object_list(role("__player__") & role("tsn"))
    if len(my_players) > 0:
        textLine = f"{my_players[0].name}, "
    else:
        textLine = f"To any TSN ship nearby, "
    textLine += f"we're getting {random.choice(wordListA)} readings from our sensors.  It could be nothing, but we are understandably {random.choice(wordListB)}.  Please assist and protect us; {random.choice(wordListC)}"

    await delay_sim(seconds=5)
    send_general_message(nName, textLine, station_face, phoenix_id)


--- end_of_create ---

    await delay_sim(minutes=1)
    jump create_new_station
    #------------------------------------------------------------------------------------------------------------

